package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/gin-gonic/gin"
)

type Vacancy struct {
	Title        string   `json:"title"`
	Description  string   `json:"description"`
	Requirements string   `json:"requirements"`
	Tags         []string `json:"tags"`
}

type QuestionRequest struct {
	Vacancy Vacancy `json:"vacancy"`
}

type AnswerAnalysisRequest struct {
	Question string  `json:"question"`
	Answer   string  `json:"answer"`
	Vacancy  Vacancy `json:"vacancy"`
}

type OpenRouterRequest struct {
	Model    string    `json:"model"`
	Messages []Message `json:"messages"`
}

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type OpenRouterResponse struct {
	Choices []Choice `json:"choices"`
}

type Choice struct {
	Message Message `json:"message"`
}

var openRouterAPIKey = os.Getenv("OPENROUTER_API_KEY")

func main() {
	if openRouterAPIKey == "" {
		log.Fatal("‚ùå OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–µ—Ä–≤–∏—Å –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
	}

	r := gin.Default()

	r.POST("/generate-questions", generateQuestionsHandler)
	r.POST("/analyze-answer", analyzeAnswerHandler)
	r.POST("/analyze-resume", analyzeResumeHandler)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8082"
	}

	log.Printf("üöÄ AI Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	r.Run(":" + port)
}

func generateQuestionsHandler(c *gin.Context) {
	var req QuestionRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ /generate-questions: %v", err)
		c.JSON(400, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	log.Printf("üì• –ó–∞–ø—Ä–æ—Å /generate-questions: Vacancy=%s", req.Vacancy.Title)

	prompt := fmt.Sprintf(`
		–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∫–∞–Ω—Å–∏–∏ "%s" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 4 —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.
		–û–ø–∏—Å–∞–Ω–∏–µ: %s
		–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: %s
		–ù–∞–≤—ã–∫–∏: %s

		–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞: ["–≤–æ–ø—Ä–æ—Å1", "–≤–æ–ø—Ä–æ—Å2", "–≤–æ–ø—Ä–æ—Å3", "–≤–æ–ø—Ä–æ—Å4"]
	`,
		req.Vacancy.Title,
		req.Vacancy.Description,
		req.Vacancy.Requirements,
		strings.Join(req.Vacancy.Tags, ", "),
	)

	raw, err := callOpenRouter(prompt)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenRouter: %v", err)
		c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"})
		return
	}

	log.Printf("üì¶ –û—Ç–≤–µ—Ç –æ—Ç OpenRouter (raw): %s", raw)

	var questions []string
	if err := json.Unmarshal([]byte(raw), &questions); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–∞—Å—Å–∏–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: %v", err)
		c.JSON(500, gin.H{"error": "–ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", "raw": raw})
		return
	}

	log.Printf("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ %d –≤–æ–ø—Ä–æ—Å–æ–≤", len(questions))
	c.JSON(200, gin.H{"questions": questions})
}

func analyzeAnswerHandler(c *gin.Context) {
	var req AnswerAnalysisRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ /analyze-answer: %v", err)
		c.JSON(400, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	log.Printf("üì• –ó–∞–ø—Ä–æ—Å /analyze-answer: –í–æ–ø—Ä–æ—Å='%s', –û—Ç–≤–µ—Ç len=%d",
		req.Question, len(req.Answer))

	prompt := fmt.Sprintf(`
		–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ü–µ–Ω–∏ –µ–≥–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 1.

		–í–∞–∫–∞–Ω—Å–∏—è: %s
		–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: %s
		–ù–∞–≤—ã–∫–∏: %s

		–í–æ–ø—Ä–æ—Å: %s
		–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: %s

		–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"score": 0.85, "feedback": "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±–µ–∫"}
	`,
		req.Vacancy.Title,
		req.Vacancy.Requirements,
		strings.Join(req.Vacancy.Tags, ", "),
		req.Question,
		req.Answer,
	)

	raw, err := callOpenRouter(prompt)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenRouter: %v", err)
		c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞"})
		return
	}

	log.Printf("üì¶ –û—Ç–≤–µ—Ç –æ—Ç OpenRouter (raw): %s", raw)

	var result map[string]interface{}
	if err := json.Unmarshal([]byte(raw), &result); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ JSON: %v", err)
		c.JSON(500, gin.H{"error": "–ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", "raw": raw})
		return
	}

	log.Printf("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞: %+v", result)
	c.JSON(200, gin.H{"result": result})
}

func callOpenRouter(prompt string) (string, error) {
	requestBody := OpenRouterRequest{
		Model: "openai/gpt-3.5-turbo",
		Messages: []Message{
			{
				Role:    "user",
				Content: prompt,
			},
		},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ JSON: %v", err)
	}

	log.Printf("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter")

	req, err := http.NewRequest("POST", "https://openrouter.ai/api/v1/chat/completions", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+openRouterAPIKey)
	req.Header.Set("HTTP-Referer", "https://hr-avatar.com")
	req.Header.Set("X-Title", "HR Avatar AI Service")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	log.Printf("‚¨ÖÔ∏è –û—Ç–≤–µ—Ç OpenRouter (status %d): %s", resp.StatusCode, string(body))

	if resp.StatusCode != 200 {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ API OpenRouter: %s", string(body))
	}

	var response OpenRouterResponse
	err = json.Unmarshal(body, &response)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if len(response.Choices) > 0 {
		return response.Choices[0].Message.Content, nil
	}

	return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
}

type ResumeAnalysisRequest struct {
	Vacancy Vacancy `json:"vacancy"`
	Resume  struct {
		Name    string `json:"name"`
		Content string `json:"content"`
		Type    string `json:"type"`
	} `json:"resume"`
}

func analyzeResumeHandler(c *gin.Context) {
	var req ResumeAnalysisRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ /analyze-resume: %v", err)
		c.JSON(400, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	log.Printf("üì• –ó–∞–ø—Ä–æ—Å /analyze-resume: Vacancy=%s, Resume=%s", req.Vacancy.Title, req.Resume.Name)

	prompt := fmt.Sprintf(`
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å—Ä–∞–≤–Ω–∏ –µ–≥–æ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π "%s".
        –í–∞–∫–∞–Ω—Å–∏—è:
        –û–ø–∏—Å–∞–Ω–∏–µ: %s
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: %s
        –ù–∞–≤—ã–∫–∏: %s

        –†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        %s

        –û—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é, –∏ –≤–µ—Ä–Ω–∏ JSON:
        {"match_score": 75, "feedback": "–ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –æ–ø—ã—Ç–∞ —Å AWS"}
    `,
		req.Vacancy.Title,
		req.Vacancy.Description,
		req.Vacancy.Requirements,
		strings.Join(req.Vacancy.Tags, ", "),
		req.Resume.Content,
	)

	raw, err := callOpenRouter(prompt)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenRouter: %v", err)
		c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ"})
		return
	}

	log.Printf("üì¶ –û—Ç–≤–µ—Ç –æ—Ç OpenRouter (raw): %s", raw)

	var result map[string]interface{}
	if err := json.Unmarshal([]byte(raw), &result); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenRouter: %v", err)
		c.JSON(500, gin.H{"error": "–ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", "raw": raw})
		return
	}

	c.JSON(200, result)
}
