services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: hrdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kafka-net

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - kafka-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_LIMIT: 3
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - kafka-net

  kafka1:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29091,PLAINTEXT_HOST://localhost:9091
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MESSAGE_MAX_BYTES: 104857600
    networks:
      - kafka-net

  kafka2:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MESSAGE_MAX_BYTES: 104857600
    networks:
      - kafka-net

  kafka3:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MESSAGE_MAX_BYTES: 104857600
    networks:
      - kafka-net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8888:8080"
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29091,kafka2:29092,kafka3:29093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-net

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.go
    ports:
      - "8080:8080"
    environment:
      - DB_URL=postgres://postgres:password@postgres:5432/hrdb?sslmode=disable
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka1:29091,kafka2:29092,kafka3:29093
      - GRPC_HOST=scoring-service  
      - GRPC_PORT=50051           
    depends_on:
      - postgres
      - redis
      - kafka1
      - kafka2
      - kafka3
      - scoring-service           
    networks:
      - kafka-net

  resume-service:
    build:
      context: .
      dockerfile: Dockerfile.resume
    ports:
      - "8081:8081"
    environment:
      - DB_URL=postgres://postgres:password@postgres:5432/hrdb?sslmode=disable
      - GRPC_HOST=scoring-service
      - GRPC_PORT=50051
      - HTTP_PORT=:8081
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka1:29091,kafka2:29092,kafka3:29093
      - YANDEX_DISK_TOKEN=${YANDEX_DISK_TOKEN}
    depends_on:
      - postgres
      - scoring-service
      - redis
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-net


  scoring-service:
    build:
      context: .
      dockerfile: Dockerfile.py
    ports:
      - "50051:50051"
    environment:
      - PYTHONPATH=/app
    networks:
      - kafka-net

  interview-service:
    build:
      context: .
      dockerfile: Dockerfile.interview
    ports:
      - "8765:8765"
    environment:
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - AI_SERVICE_URL=http://ai-service:8082
    networks:
      - kafka-net

  ai-service:
    build:
      context: .
      dockerfile: Dockerfile.ai
    ports:
      - "8082:8082"
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    networks:
      - kafka-net



volumes:
  postgres-data:
  redis-data:

networks:
  kafka-net:
    driver: bridge
